# -*- coding: utf-8 -*-
"""Sentiment Analysis of Restaurant Reviews

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jER0LTBT0hKu2yG8ALWVJ61w1bNotNmO

Connect with me **https://www.linkedin.com/in/abhishek-gangane/**

<div class="markdown-google-sans">

## **Getting started with Sentiment Analysis of Restaurant Reviews Project**
</div>
This notebook deals with the Sentiment Analysis of Restaurant Reviews using Restaurant_Reviews.tsv data
"""

from google.colab import drive
 drive.mount('/content/drive/')

import numpy as np
import pandas as pd

data = pd.read_csv('/content/drive/MyDrive/IBM Edunet/Restaurant_Reviews.tsv', delimiter='\t', quoting=3)

data.shape

data.columns

data.head

data.info

import nltk
import re
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

corpus = []
for i in range(0,1000):

  review = re.sub(pattern='[^a-zA-Z]', repl=' ', string=data['Review'][i])

  review = review.lower()

  review_words = review.split()

  review_words = [word for word in review_words if not word in set(stopwords.words('english'))]

  ps = PorterStemmer()
  review = [ps.stem(word) for word in review_words]

  review = ' '.join(review)

  corpus.append(review)

corpus[:1500]

from sklearn.feature_extraction.text import CountVectorizer

 cv = CountVectorizer(max_features=1500)
 X = cv.fit_transform(corpus).toarray()
 y = data.iloc[:, 1].values

from sklearn.model_selection import train_test_split
 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""**Takeway points:**


*   usually we take more and more data in training so it's easy for the model to learn with more data




"""

from sklearn.naive_bayes import MultinomialNB

 classifier = MultinomialNB()
 classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

y_pred

from sklearn.metrics import accuracy_score

 from sklearn.metrics import precision_score

 from sklearn.metrics import recall_score

 score1 = accuracy_score(y_test, y_pred)
 score2 = precision_score(y_test, y_pred)
 score3 = recall_score(y_test, y_pred)

 print("----Scores----")
 print("Accuracy score is: {}%".format(round(score1*100,2)))
 print("Precision score is: {}%".format(round(score2*100,2)))
 print("Recall score is: {}%".format(round(score3*100,2)))

from sklearn.metrics import confusion_matrix
 cm = confusion_matrix(y_test, y_pred)
 cm

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize = (10, 6))
sns.heatmap(cm, annot=True, cmap="YlGnBu", xticklabels=['negative','Positive'], yticklabels=['negative','Positive'])

plt.xlabel('predicted values')
plt.ylabel('Actual values')

from numpy.random import multinomial
best_accuracy = 0.0
alpha_val = 0.0
for i in np.arange(0.1,1.1,0.1):
  temp_classifier = MultinomialNB(alpha=i)
  temp_classifier.fit(X_train, y_train)
  temp_y_pred = temp_classifier.predict(X_test)
  score = accuracy_score(y_test, temp_y_pred)
  print("Accuracy score for alpha={} is: {}%".format(round(i,1), round(score*100,2)))
  if score > best_accuracy:
    best_accuracy = score
    alpha_val = i
print('---------------------------------------------')
print('The best accuracy is {}% with alpha value as {}'.format(round(best_accuracy*100,2),round(alpha_val,1)))

classifier = MultinomialNB(alpha=0.2)
classifier.fit(X_train, y_train)

def predict_review(sample_message):
    sample_message = re.sub(pattern='[^a-zA-Z]',repl=' ', string = sample_message)
    sample_message = sample_message.lower()
    sample_message_words = sample_message.split()
    sample_message_words = [word for word in sample_message_words if not word in set(stopwords.words('english'))]
    ps = PorterStemmer()
    final_message = [ps.stem(word) for word in sample_message_words]
    final_message = ' '.join(final_message)
    temp = cv.transform([final_message]).toarray()
    return classifier.predict(temp)

result = ['Ohh Shit! Negetive Review','Good! Positive Review']
msg = 'The food is really great here.'

if predict_review(msg):
    print(result[1])
else:
    print(result[0])

msg = 'Food was pretty bad and the service was very slow.'

if predict_review(msg):
    print(result[1])
else:
    print(result[0])

msg = 'The food was absolutely wonderful, from preparation to presentation, very pleasing.'

if predict_review(msg):
    print(result[1])
else:
    print(result[0])